{
  "name": "Java",
  "tagline": "Pass-by-Value vs. Pass-by-Reference",
  "body": "# Java Pass-by-Reference or Pass-by-Value\r\n\r\n1. Pass-by-Value:\r\nPass-by-Value means: The called method can't change the value of the caller's method.\r\n\r\n2. Pass-by-Reference:\r\nPass-by-Reference means: The called method can change the value of the caller's method.\r\n\r\nWhen we talk about Pass-by-Reference vs. Pass-by-Value, we actually need to see what semantics the language is using.\r\n\r\n## Two things to understand.\r\n1. Java manipulate objects by their references.\r\n2. It passes references to methods by value.\r\n\r\n**Note: Strings are an exception, in java strings are immutable and they always create a new object.\r\n\r\nJava is actually pass-by-value for all variables running within a single VM. Pass-by-value means pass-by-variable-value. And that means pass-by-copy-of-the-variable!.\r\n\r\nWhether you are passing a primitive variable or the reference to an object; you are always passing a copy of bits in the variable. The called method then gets its own copy of the reference variable to do with it what it likes.But because two identical reference variables refer to the exact same object, if the called method modifies the object (by invoking setter methods, for example), the caller will see that the object the caller's original variable refers to has also been changed.\r\n\r\n## Example\r\n\r\npublic class JavaSemantics {\r\n    public static void main(String[] args) {\r\n            ClassRoom classRoom = new ClassRoom(5, 5, 5);\r\n                  System.out.println(\"Before magic \" + classRoom.getWidth() + \" \" + \r\n                                      classRoom.getHeight() + \" \" + classRoom.getLength());\r\n\r\n                // Passing the classRoom object as a reference to magic by value.\r\n                magic(classRoom);\r\n                System.out.println(\"After magic \" + classRoom.getWidth() + \" \" + \r\n                               classRoom.getHeight() + \" \" + classRoom.getLength());\r\n    }\r\n    \r\n    static void magic(ClassRoom classRoom) {\r\n\t\r\n\t\t//Changing the original Object for which we got the reference as a value.\r\n\t\tclassRoom.setWidth(10);\r\n\t\tclassRoom.setHeight(10);\r\n\t\tclassRoom.setLength(10);\r\n\t\t\r\n\t\t// Assigning classRoom reference to a new ClassRoom object.\r\n\t\tclassRoom = new ClassRoom(20, 20, 20);\r\n\t\t\r\n\t\tSystem.out.println(\"Inside magic \" + classRoom.getWidth() + \" \" + \r\n                                   classRoom.getHeight() + \" \" + classRoom.getLength());\r\n\t}\r\n}\r\n\r\nclass ClassRoom {\r\n\tprivate int width;\r\n\tprivate int height;\r\n\tprivate int length;\r\n\t\r\n\tpublic ClassRoom(int width, int height, int length) {\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\t\tthis.length = length;\r\n\t}\r\n\t\r\n\tpublic void setWidth(int width) {\r\n\t\tthis.width = width;\r\n\t}\r\n\t\r\n\tpublic void setHeight(int height) {\r\n\t\tthis.height = height;\r\n\t}\r\n\t\r\n\tpublic void setLength(int length) {\r\n\t\tthis.length = length;\r\n\t}\r\n\t\r\n\tpublic int getWidth() {\r\n\t\treturn width;\r\n\t}\r\n\t\r\n\tpublic int getHeight() {\r\n\t\treturn height;\r\n\t}\r\n\t\r\n\tpublic int getLength() {\r\n\t\treturn length;\r\n\t}\r\n}\r\n\r\n\r\nOutput:\r\nBefore magic 5 5 5\r\nInside magic 20 20 20\r\nAfter magic 10 10 10",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}